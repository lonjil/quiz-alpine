#!/usr/bin/env bash
set -uo pipefail

usage() {
  cat <<EOF
spin up a qemu microvm with ZFS ready to go
usage: quiz [opts] [program [args...]]

options:
  -p <profile,...>
        list of profiles to include in this run
  -h    this help
EOF
  exit 1
}

trace() {
  local STAMP=$(date +%Y%m%d-%H:%M:%S)
  echo "[quiz] $STAMP $@" >&2
}

fail() {
  trace "FATAL $@"
  exit 1
}
trap fail ERR

RUNDIR=$(realpath $(dirname $0))
source $RUNDIR/quiz-config

opt_profile="$QUIZ_PROFILE"

OPTIND=1
while getopts "p:h" opt
do
  case "$opt" in
    'p') opt_profile=$OPTARG ;;
    'h') usage ;;
    *) exit 1 ;;
  esac
done
shift $(expr $OPTIND - 1)

# create init dir and install second stage
rm -rf $RUNDIR/system/init
mkdir -p $RUNDIR/system/init/.quiz
install -m 755 init/init2 $RUNDIR/system/init/.quiz/init2

# XXX ensure user dir exists
mkdir -p $RUNDIR/system/user

# get profiles set up. source the profile setup here, and build a profile init
# to be run right before we exec into the real program
profiles=$(echo $opt_profile | sed 's/,/ /g')
if [[ $profiles ]] ; then
  for v in ${!QUIZ_@} ; do
    echo "$v=${!v@Q}" >> $RUNDIR/system/init/.quiz/init.profile
  done
fi
for p in $profiles ; do
  if [[ ! -d $RUNDIR/profile/$p ]] ; then
    fail "unknown profile: $p"
  fi
  trace "including profile: $p"

  if [[ -f $RUNDIR/profile/$p/setup ]] ; then
    source $RUNDIR/profile/$p/setup
  fi

  if [[ -f $RUNDIR/profile/$p/init ]] ; then
    echo "echo 'quiz: starting profile init: $p' >> /dev/kmsg" \
      >> $RUNDIR/system/init/.quiz/init.profile
    cat $RUNDIR/profile/$p/init >> $RUNDIR/system/init/.quiz/init.profile
  fi

  if [[ -d $RUNDIR/profile/$p/etc ]] ; then
    rsync -a $RUNDIR/profile/$p/etc/ $RUNDIR/system/work/etc/
  fi
  if [[ -d $RUNDIR/profile/$p/local ]] ; then
    rsync -a $RUNDIR/profile/$p/local/ $RUNDIR/system/work/usr/local/
  fi
done

# if they wanted a specific command, set up a run script for init to execute
rm -f $RUNDIR/system/init/.quiz/run
if [[ $# -ne 0 ]] ; then
  trace "creating run script"
  echo "$@" > $RUNDIR/system/init/.quiz/run
  chmod +x $RUNDIR/system/init/.quiz/run
fi

trace "starting microvm"

# this is hand rolled from my early tests. seems right but its a lot of mess
qemu-system-x86_64 \
	-M microvm,x-option-roms=off,pit=off,pic=off,rtc=off,isa-serial=off \
	-enable-kvm \
		-cpu host -m 2G -smp 2 \
  -kernel $RUNDIR/system/bzImage-$QUIZ_KERNEL_VERSION \
		-append "earlyprintk=hvc0 console=hvc0 root=/dev/vda ro reboot=t $QUIZ_KERNEL_OPTS" \
  -nodefaults -no-user-config -nographic \
  -chardev stdio,mux=on,id=virtiocon0 \
  -mon chardev=virtiocon0,mode=readline \
  -device virtio-serial-device \
  -device virtconsole,chardev=virtiocon0 \
  -device virtio-balloon-device \
  -device pvpanic \
  -drive id=root,file=$RUNDIR/system/$QUIZ_DEBIAN_RELEASE.ext2,format=raw,read-only=on,if=none \
  -device virtio-blk-device,drive=root,serial=root \
  -fsdev local,id=quiz-init,path=$RUNDIR/system/init,security_model=none,readonly=on \
  -device virtio-9p-device,fsdev=quiz-init,mount_tag=quiz-init \
  -fsdev local,id=quiz-system,path=$RUNDIR/system/work,security_model=none,readonly=on \
  -device virtio-9p-device,fsdev=quiz-system,mount_tag=quiz-system \
  -fsdev local,id=quiz-user,path=$RUNDIR/system/user,security_model=none,readonly=on \
  -device virtio-9p-device,fsdev=quiz-user,mount_tag=quiz-user \
  $QUIZ_QEMU_OPTS \

trace "done"

# vim: ft=bash
