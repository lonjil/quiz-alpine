#!/usr/bin/env bash
set -uo pipefail

usage() {
  cat <<EOF
spin up a qemu microvm with ZFS ready to go
usage: quiz [opts] [program [args...]]

options:
  -b    create a pair of block devices and make them available to the vm
  -p    with -b, preserve existing block devices if they exist
  -z    with -b, create a pool. with -p, import it
  -h    this help
EOF
  exit 1
}

trace() {
  local STAMP=$(date +%Y%m%d-%H:%M:%S)
  echo "[quiz] $STAMP $@" >&2
}

fail() {
  trace "FATAL $@"
  exit 1
}
trap fail ERR

opt_block=0
opt_preserve_block=0
opt_setup_pool=0

OPTIND=1
while getopts "bpzh" opt
do
  case "$opt" in
    'b') opt_block=1 ;;
    'p') opt_preserve_block=1 ;;
    'z') opt_setup_pool=1 ;;
    'h') usage ;;
  esac
done
shift $(expr $OPTIND - 1)

RUNDIR=$(realpath $(dirname $0))

EXTRA_QEMU_OPTS=""
EXTRA_KERNEL_OPTS=""

# option dep checks
if [ $opt_block = 0 ] ; then
  if [ $opt_preserve_block = 1 ] ; then
    fail "can't use -p without -b"
  elif [ $opt_setup_pool = 1 ] ; then
    fail "can't use -z without -b"
  fi
fi

# setup block devices
if [ $opt_block = 1 ] ; then
  trace "preparing block devices"

  mkdir -p $RUNDIR/system/block

  if [ ! -e $RUNDIR/system/block/block1 -a $opt_preserve_block = 0 ] ; then
    trace "creating block1 backing file"
    dd if=/dev/zero of=$RUNDIR/system/block/block1 bs=1M count=512 conv=sparse
  fi

  if [ ! -e $RUNDIR/system/block/block2 -a $opt_preserve_block = 0 ] ; then
    trace "creating block2 backing file"
    dd if=/dev/zero of=$RUNDIR/system/block/block2 bs=1M count=512 conv=sparse
  fi

  EXTRA_QEMU_OPTS="$EXTRA_QEMU_OPTS \
    -drive id=block1,file=$RUNDIR/system/block/block1,format=raw,if=none \
    -device virtio-blk-device,drive=block1 \
    -drive id=block2,file=$RUNDIR/system/block/block2,format=raw,if=none \
    -device virtio-blk-device,drive=block2 \
  "

  if [ $opt_preserve_block = 0 ] ; then
    trace "will format block devices on boot"
    EXTRA_KERNEL_OPTS="$EXTRA_KERNEL_OPTS quiz.formatdevs=1"
  fi
fi

if [ $opt_setup_pool = 1 ] ; then
  if [ $opt_preserve_block = 1 ] ; then
    trace "will import pool on boot"
    EXTRA_KERNEL_OPTS="$EXTRA_KERNEL_OPTS quiz.importpool=1"
  else
    trace "will create pool on boot"
    EXTRA_KERNEL_OPTS="$EXTRA_KERNEL_OPTS quiz.createpool=1"
  fi
fi


if [ $# -ne 0 ] ; then
  echo -n exec > $RUNDIR/system/work/.quiz.run
  for arg in "$@" ; do
    echo -n " '$arg'" >> $RUNDIR/system/work/.quiz.run
  done
  echo >> $RUNDIR/system/work/.quiz.run
else
  cat > $RUNDIR/system/work/.quiz.run <<EOF
exec /bin/bash
EOF
fi
chmod +x $RUNDIR/system/work/.quiz.run

trace "running qemu"

qemu-system-x86_64 \
	-M microvm,x-option-roms=off,pit=off,pic=off,rtc=off,isa-serial=off \
	-enable-kvm \
		-cpu host -m 1G -smp 2 \
  -kernel $RUNDIR/system/bzImage \
		-append "earlyprintk=hvc0 console=hvc0 root=/dev/vda ro reboot=t $EXTRA_KERNEL_OPTS" \
  -nodefaults -no-user-config -nographic \
  -chardev stdio,id=virtiocon0 \
  -device virtio-serial-device \
  -device virtconsole,chardev=virtiocon0 \
  -device pvpanic \
  -drive id=root,file=$RUNDIR/system/root.ext2,format=raw,read-only=on,if=none \
  -device virtio-blk-device,drive=root \
  -fsdev local,id=work,path=$RUNDIR/system/work,security_model=none,readonly=on \
  -device virtio-9p-device,fsdev=work,mount_tag=work \
  $EXTRA_QEMU_OPTS \

trace "done"
