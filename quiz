#!/usr/bin/env bash
set -uo pipefail

usage() {
  cat <<EOF
spin up a qemu microvm with ZFS ready to go
usage: quiz [opts] [program [args...]]

options:
  -p <profile,...>
        list of profiles to include in this run
  -h    this help
EOF
  exit 1
}

trace() {
  local STAMP=$(date +%Y%m%d-%H:%M:%S)
  echo "[quiz] $STAMP $@" >&2
}

fail() {
  trace "FATAL $@"
  exit 1
}
trap fail ERR

opt_profile=''

OPTIND=1
while getopts "p:h" opt
do
  case "$opt" in
    'p') opt_profile=$OPTARG ;;
    'h') usage ;;
    *) exit 1 ;;
  esac
done
shift $(expr $OPTIND - 1)

RUNDIR=$(realpath $(dirname $0))

EXTRA_QEMU_OPTS=""
EXTRA_KERNEL_OPTS=""

# get profiles set up. source the profile setup here, and build a profile init
# to be run right before we exec into the real program
profiles=$(echo $opt_profile | sed 's/,/ /g')
rm -f $RUNDIR/system/work/.quiz/init.profile
for p in $profiles ; do
  if [[ ! -d $RUNDIR/profile/$p ]] ; then
    fail "unknown profile: $p"
  fi
  if [[ -f $RUNDIR/profile/$p/init ]] ; then
    trace "including profile: $p"

    if [[ -f $RUNDIR/profile/$p/setup ]] ; then
      source $RUNDIR/profile/$p/setup
    fi

    echo "# quiz profile init: $p" >> $RUNDIR/system/work/.quiz/init.profile
    cat $RUNDIR/profile/$p/init >> $RUNDIR/system/work/.quiz/init.profile
  fi
done

if [ $# -ne 0 ] ; then
  echo -n exec > $RUNDIR/system/work/.quiz/run
  for arg in "$@" ; do
    echo -n " '$arg'" >> $RUNDIR/system/work/.quiz/run
  done
  echo >> $RUNDIR/system/work/.quiz/run
else
  cat > $RUNDIR/system/work/.quiz/run <<EOF
exec /bin/bash
EOF
fi
chmod +x $RUNDIR/system/work/.quiz/run

trace "running qemu"

qemu-system-x86_64 \
	-M microvm,x-option-roms=off,pit=off,pic=off,rtc=off,isa-serial=off \
	-enable-kvm \
		-cpu host -m 1G -smp 2 \
  -kernel $RUNDIR/system/bzImage \
		-append "earlyprintk=hvc0 console=hvc0 root=/dev/vda ro reboot=t $EXTRA_KERNEL_OPTS" \
  -nodefaults -no-user-config -nographic \
  -chardev stdio,id=virtiocon0 \
  -device virtio-serial-device \
  -device virtconsole,chardev=virtiocon0 \
  -device pvpanic \
  -drive id=root,file=$RUNDIR/system/root.ext2,format=raw,read-only=on,if=none \
  -device virtio-blk-device,drive=root \
  -fsdev local,id=work,path=$RUNDIR/system/work,security_model=none,readonly=on \
  -device virtio-9p-device,fsdev=work,mount_tag=work \
  $EXTRA_QEMU_OPTS \

trace "done"
